{"title":"CASL Mongoose","categories":["package"],"order":110,"meta":{"keywords":null,"description":null},"content":"<p><a href=\"https://badge.fury.io/js/%40casl%2Fmongoose\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://badge.fury.io/js/%40casl%2Fmongoose.svg\" alt=\"@casl/mongoose NPM version\"></a>\n<a href=\"https://www.npmjs.com/package/%40casl%2Fmongoose\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/npm/dm/%40casl%2Fmongoose.svg\" alt=\"\"></a>\n<a href=\"https://gitter.im/stalniy-casl/casl\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"CASL Join the chat\"></a></p>\n<p>This package integrates <a href=\"https://github.com/stalniy/casl\" target=\"_blank\" rel=\"noopener nofollow\">CASL</a> and <a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener nofollow\">MongoDB</a>. In other words, it allows to fetch records based on CASL rules from MongoDB and answer questions like: &quot;Which records can be read?&quot; or &quot;Which records can be updated?&quot;.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"h-link\" href=\"#\"></a>Installation</h2>\n<pre><code class=\"hljs language-sh\">npm install @casl/mongoose @casl/ability\n<span class=\"hljs-comment\"># or</span>\nyarn add @casl/mongoose @casl/ability\n<span class=\"hljs-comment\"># or</span>\npnpm add @casl/mongoose @casl/ability\n</code></pre>\n<h2 id=\"integration-with-mongoose\"><a name=\"integration-with-mongoose\" class=\"h-link\" href=\"#\"></a>Integration with mongoose</h2>\n<p><a href=\"http://mongoosejs.com/\" target=\"_blank\" rel=\"noopener nofollow\">mongoose</a> is a popular JavaScript ODM for <a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener nofollow\">MongoDB</a>. <code>@casl/mongoose</code> provides 2 plugins that allow to integrate <code>@casl/ability</code> and mongoose in few minutes:</p>\n<h3 id=\"accessible-records-plugin\"><a name=\"accessible-records-plugin\" class=\"h-link\" href=\"#\"></a>Accessible Records plugin</h3>\n<p><code>accessibleRecordsPlugin</code> is a plugin which adds <code>accessibleBy</code> method to query and static methods of your models. You can add this plugin globally:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { accessibleRecordsPlugin } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@casl/mongoose'</span>);\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n\nmongoose.plugin(accessibleRecordsPlugin);\n</code></pre>\n<blockquote>\n<p>Make sure you add the plugin before calling <code>mongoose.model(...)</code> method. Mongoose won't add global plugins to models that where created before calling <code>mongoose.plugin()</code>.</p>\n</blockquote>\n<p>or to a particular model:</p>\n<pre><code data-filename=\"Post.js\" class=\"language-js\"><span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>)\n<span class=\"hljs-keyword\">const</span> { accessibleRecordsPlugin } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@casl/mongoose'</span>)\n\n<span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-keyword\">new</span> mongoose.Schema({\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">String</span>,\n  <span class=\"hljs-attr\">author</span>: <span class=\"hljs-built_in\">String</span>\n})\n\nPost.plugin(accessibleRecordsPlugin)\n\n<span class=\"hljs-built_in\">module</span>.exports = mongoose.model(<span class=\"hljs-string\">'Post'</span>, Post)\n</code></pre>\n<p>Afterwards you can fetch accessible records by calling <code>accessibleBy</code> method on <code>Post</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./Post'</span>)\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./ability'</span>) <span class=\"hljs-comment\">// defines Ability instance</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> accessiblePosts = <span class=\"hljs-keyword\">await</span> Post.accessibleBy(ability);\n  <span class=\"hljs-built_in\">console</span>.log(accessiblePosts);\n}\n</code></pre>\n<blockquote>\n<p>See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/intro&quot;}\">CASL guide</app-link> to learn how to define abilities</p>\n</blockquote>\n<p>or on existing query instance:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./Post'</span>);\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./ability'</span>);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> accessiblePosts = <span class=\"hljs-keyword\">await</span> Post.find({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'draft'</span> })\n    .accessibleBy(ability)\n    .select(<span class=\"hljs-string\">'title'</span>);\n  <span class=\"hljs-built_in\">console</span>.log(accessiblePosts);\n}\n</code></pre>\n<p><code>accessibleBy</code> returns an instance of <code>mongoose.Query</code> and that means you can chain it with any <code>mongoose.Query</code>'s method (e.g., <code>select</code>, <code>limit</code>, <code>sort</code>). By default, <code>accessibleBy</code> constructs query based on the list of rules for <code>read</code> action but you can change this by providing the 2nd optional argument:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./Post'</span>);\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./ability'</span>);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> postsThatCanBeUpdated = <span class=\"hljs-keyword\">await</span> Post.accessibleBy(ability, <span class=\"hljs-string\">'update'</span>);\n  <span class=\"hljs-built_in\">console</span>.log(postsThatCanBeUpdated);\n}\n</code></pre>\n<blockquote>\n<p><code>accessibleBy</code> is built on top of <code>rulesToQuery</code> function from <code>@casl/ability/extra</code>. Read <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/ability-to-database-query&quot;}\">Ability to database query</app-link> to get insights of how it works.</p>\n</blockquote>\n<p>In case when user doesn’t have permission to do a particular action, CASL will not even send request to MongoDB and instead will force Query to return empty result set. CASL patches native mongodb collection's methods in such case to return predefine value (empty array for <code>find</code>, <code>null</code> for <code>findOne</code> and <code>0</code> for <code>count</code>). It also adds <code>__forbiddenByCasl__: 1</code> condition which will enforce mongodb to return empty set in case if you use one of methods that are not patched, so users who is not allowed to get particular records won't get them!</p>\n<p>For example, lets find all posts which user can delete (we haven’t defined abilities for delete):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { defineAbility } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@casl/ability'</span>);\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n<span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./Post'</span>);\n\nmongoose.set(<span class=\"hljs-string\">'debug'</span>, <span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\"><span class=\"hljs-params\">can</span> =&gt;</span> can(<span class=\"hljs-string\">'read'</span>, <span class=\"hljs-string\">'Post'</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">false</span> }));\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> posts = <span class=\"hljs-keyword\">await</span> Post.accessibleBy(ability, <span class=\"hljs-string\">'delete'</span>);\n  <span class=\"hljs-built_in\">console</span>.log(posts) <span class=\"hljs-comment\">// [];</span>\n}\n</code></pre>\n<p>You can also use the resulting conditions in <a href=\"https://mongoosejs.com/docs/api.html#aggregate_Aggregate\" target=\"_blank\" rel=\"noopener nofollow\">aggregation pipeline</a>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./Post'</span>);\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./ability'</span>);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> query = Post.accessibleBy(ability)\n    .where({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'draft'</span> })\n    .getQuery();\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> Post.aggregate([\n    {\n      <span class=\"hljs-attr\">$match</span>: {\n        <span class=\"hljs-attr\">$and</span>: [\n          query,\n          <span class=\"hljs-comment\">// other aggregate conditions</span>\n        ]\n      }\n    },\n    <span class=\"hljs-comment\">// other pipelines here</span>\n  ]);\n  <span class=\"hljs-built_in\">console</span>.log(result);\n}\n</code></pre>\n<p>or in <a href=\"https://mongoosejs.com/docs/api.html#model_Model.mapReduce\" target=\"_blank\" rel=\"noopener nofollow\">mapReduce</a>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./Post'</span>);\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./ability'</span>);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> query = Post.accessibleBy(ability)\n    .where({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'draft'</span> })\n    .getQuery();\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> Post.mapReduce({\n    <span class=\"hljs-attr\">query</span>: {\n      <span class=\"hljs-attr\">$and</span>: [\n        query,\n        <span class=\"hljs-comment\">// other conditions</span>\n      ]\n    },\n    <span class=\"hljs-attr\">map</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> emit(<span class=\"hljs-keyword\">this</span>.title, <span class=\"hljs-number\">1</span>);\n    reduce: <span class=\"hljs-function\">(<span class=\"hljs-params\">_, items</span>) =&gt;</span> items.length;\n  });\n  <span class=\"hljs-built_in\">console</span>.log(result);\n}\n</code></pre>\n<h3 id=\"accessible-fields-plugin\"><a name=\"accessible-fields-plugin\" class=\"h-link\" href=\"#\"></a>Accessible Fields plugin</h3>\n<p><code>accessibleFieldsPlugin</code> is a plugin that adds <code>accessibleFieldsBy</code> method to instance and static methods of a model and allows to retrieve all accessible fields. This is useful when you need send only accessible part of a model in response:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { accessibleFieldsPlugin } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@casl/mongoose'</span>);\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n<span class=\"hljs-keyword\">const</span> pick = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'lodash/pick'</span>);\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./ability'</span>);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./app'</span>); <span class=\"hljs-comment\">// express app</span>\n\nmongoose.plugin(accessibleFieldsPlugin);\n\n<span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./Post'</span>);\n\napp.get(<span class=\"hljs-string\">'/api/posts/:id'</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n  <span class=\"hljs-keyword\">const</span> post = <span class=\"hljs-keyword\">await</span> Post.accessibleBy(ability).findByPk(req.params.id);\n  res.send(pick(post, post.accessibleFieldsBy(ability))\n});\n</code></pre>\n<p>Method with the same name exists on Model's class. But <strong>it's important</strong> to understand the difference between them. Static method does not take into account conditions! It follows the same <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/intro&quot;}\" hash=\"checking-logic\">checking logic</app-link> as <code>Ability</code>'s <code>can</code> method. Let's see an example to recap:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { defineAbility } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@casl/ability'</span>);\n<span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./Post'</span>);\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">'read'</span>, <span class=\"hljs-string\">'Post'</span>, [<span class=\"hljs-string\">'title'</span>], { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> });\n  can(<span class=\"hljs-string\">'read'</span>, <span class=\"hljs-string\">'Post'</span>, [<span class=\"hljs-string\">'title'</span>, <span class=\"hljs-string\">'description'</span>], { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">false</span> });\n});\n<span class=\"hljs-keyword\">const</span> post = <span class=\"hljs-keyword\">new</span> Post({ <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Private post'</span> });\n\nPost.accessibleFieldsBy(ability); <span class=\"hljs-comment\">// ['title', 'description']</span>\npost.accessibleFieldsBy(ability); <span class=\"hljs-comment\">// ['title']</span>\n</code></pre>\n<p>As you can see, a static method returns all fields that can be read for all posts. At the same time, an instance method returns fields that can be read from this particular <code>post</code> instance. That's why there is no much sense (except you want to reduce traffic between app and database) to pass the result of static method into <code>mongoose.Query</code>'s <code>select</code> method because eventually you will need to call <code>accessibleFieldsBy</code> on every instance.</p>\n<h2 id=\"integration-with-any-mongo-db-library\"><a name=\"integration-with-any-mongo-db-library\" class=\"h-link\" href=\"#\"></a>Integration with any MongoDB library</h2>\n<p>In case you don't use mongoose, this package provides <code>toMongoQuery</code> function which can convert CASL rules into <a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener nofollow\">MongoDB</a> query. Lets see an example of how to fetch accessible records using raw <a href=\"https://mongodb.github.io/node-mongodb-native/\" target=\"_blank\" rel=\"noopener nofollow\">MongoDB adapter</a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { toMongoQuery } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@casl/mongoose'</span>);\n<span class=\"hljs-keyword\">const</span> { MongoClient } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongodb'</span>);\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./ability'</span>);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> db = <span class=\"hljs-keyword\">await</span> MongoClient.connect(<span class=\"hljs-string\">'mongodb://localhost:27017/blog'</span>);\n  <span class=\"hljs-keyword\">const</span> query = toMongoQuery(ability, <span class=\"hljs-string\">'Post'</span>, <span class=\"hljs-string\">'update'</span>);\n  <span class=\"hljs-keyword\">let</span> posts;\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">if</span> (query === <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-comment\">// returns null if ability does not allow to update posts</span>\n      posts = [];\n    } <span class=\"hljs-keyword\">else</span> {\n      posts = <span class=\"hljs-keyword\">await</span> db.collection(<span class=\"hljs-string\">'posts'</span>).find(query);\n    }\n  } <span class=\"hljs-keyword\">finally</span> {\n    db.close();\n  }\n\n  <span class=\"hljs-built_in\">console</span>.log(posts);\n}\n</code></pre>\n<h2 id=\"type-script-support\"><a name=\"type-script-support\" class=\"h-link\" href=\"#\"></a>TypeScript support</h2>\n<p>The package is written in TypeScript, this makes it easier to work with plugins and <code>toMongoQuery</code> helper because IDE will hint you about you can pass inside arguments and TypeScript will warn you about wrong usage.</p>\n<h2 id=\"want-to-help\"><a name=\"want-to-help\" class=\"h-link\" href=\"#\"></a>Want to help?</h2>\n<p>Want to file a bug, contribute some code, or improve documentation? Excellent! Read up on guidelines for <a href=\"https://github.com/stalniy/casl/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener nofollow\">contributing</a>.</p>\n<p>If you'd like to help us sustain our community and project, consider <a href=\"https://opencollective.com/casljs/contribute\" target=\"_blank\" rel=\"noopener nofollow\">to become a financial contributor on Open Collective</a></p>\n<blockquote>\n<p>See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;support-casljs&quot;}\">Support CASL</app-link> for details</p>\n</blockquote>\n<h2 id=\"license\"><a name=\"license\" class=\"h-link\" href=\"#\"></a>License</h2>\n<p><a href=\"http://www.opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener nofollow\">MIT License</a></p>","headings":[{"id":"installation","title":"Installation"},{"id":"integration-with-mongoose","title":"Integration with mongoose"},{"id":"accessible-records-plugin","title":"Accessible Records plugin"},{"id":"accessible-fields-plugin","title":"Accessible Fields plugin"},{"id":"integration-with-any-mongo-db-library","title":"Integration with any MongoDB library"},{"id":"type-script-support","title":"TypeScript support"},{"id":"want-to-help","title":"Want to help?"},{"id":"license","title":"License"}],"id":"package/casl-mongoose"}