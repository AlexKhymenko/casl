{"title":"Typescript Support","categories":["advanced"],"order":60,"meta":{"keywords":null,"description":null},"content":"<p>CASL is written in <a href=\"https://typescriptlang.org/\" target=\"_blank\" rel=\"noopener nofollow\">TypeScript</a> and this brings several benefits:</p>\n<ul>\n<li>better safety as you can control what actions and subjects can be used</li>\n<li>better IDE integration as you can get hints on what classes you can use and arguments you need to pass inside</li>\n<li>easier library support, we can forgot about synchronization issues between <code>.d.ts</code> and <code>.js</code> files</li>\n</ul>\n<p>So, let's play around with them</p>\n<blockquote>\n<p>Minimum supported Typescript version is <strong>3.5.3</strong></p>\n</blockquote>\n<h2 id=\"permissions-inference\"><a name=\"permissions-inference\" class=\"h-link\" href=\"#\"></a>Permissions inference</h2>\n<p><code>Ability</code> class accepts 2 generic parameters:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, Subject, MongoQuery } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@casl/ability'</span>;\n\n<span class=\"hljs-keyword\">type</span> PossibleAbilities = <span class=\"hljs-built_in\">string</span> | [<span class=\"hljs-built_in\">string</span>, Subject];\n<span class=\"hljs-keyword\">type</span> Conditions = MongoQuery;\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability&lt;PossibleAbilities, Conditions&gt;();\n</code></pre>\n<blockquote>\n<p><code>Subject</code> is a special type that represents all possible subjects that <code>Ability</code> can accept. So, it's <code>object | string | Function | undefined</code>.</p>\n</blockquote>\n<p>Don't be scared by the complexity, <code>Ability</code> uses that types by default, so the example above is the same as the one below:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@casl/ability'</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability();\n</code></pre>\n<p>These types are enough to protect you from passing from arguments but you can go further and make them even stricter. To illustrate how, let's consider a blog application, which has <code>User</code>, <code>Article</code> and <code>Comment</code> entities with the next permissions:</p>\n<ul>\n<li>can <code>create</code>, <code>update</code>, <code>delete</code> own <code>Article</code> or <code>Comment</code></li>\n<li>can <code>read</code> any <code>Article</code>, any <code>Comment</code> and any <code>User</code></li>\n</ul>\n<p>So, let's translate this to CASL by specifying all possible actions and all possible subjects as generic parameters:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@casl/ability'</span>;\n\n<span class=\"hljs-keyword\">type</span> Actions = <span class=\"hljs-string\">'create'</span> | <span class=\"hljs-string\">'read'</span> | <span class=\"hljs-string\">'update'</span> | <span class=\"hljs-string\">'delete'</span>;\n<span class=\"hljs-keyword\">type</span> Subjects = <span class=\"hljs-string\">'Article'</span> | <span class=\"hljs-string\">'Comment'</span> | <span class=\"hljs-string\">'User'</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability&lt;[Actions, Subjects]&gt;();\n</code></pre>\n<p>If you try to type <code>ability.can(</code> in <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener nofollow\">VSCode</a> (it should work in other IDEs that support TypeScript) it will suggest possible arguments:</p>\n<p><img src=\"/casl/v4//images/casl-action-hints.png\" alt=\"CASL Typescript action hints\" width=\"626\" height=\"124\"></p>\n<p>The same happens when you try to specify the 2nd argument:</p>\n<p><img src=\"/casl/v4//images/casl-subject-hints.png\" alt=\"CASL Typescript subject hints\" width=\"760\" height=\"144\"></p>\n<p>The same behavior works for <code>AbilityBuilder</code> and <code>defineAbility</code> functions as well:</p>\n<p><img src=\"/casl/v4//images/casl-abilitybuilder.png\" alt=\"CASL Typescript AbilityBuilder hints\" width=\"619\" height=\"282\"></p>\n<h2 id=\"infer-subject-types-from-interfaces-and-classes\"><a name=\"infer-subject-types-from-interfaces-and-classes\" class=\"h-link\" href=\"#\"></a>Infer subject types from interfaces and classes</h2>\n<p>You can also specify interfaces as subjects:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@casl/ability'</span>;\n\n<span class=\"hljs-keyword\">interface</span> Article {\n  id: <span class=\"hljs-built_in\">number</span>\n  title: <span class=\"hljs-built_in\">string</span>\n  content: <span class=\"hljs-built_in\">string</span>\n  authorId: <span class=\"hljs-built_in\">number</span>\n}\n\n<span class=\"hljs-keyword\">interface</span> User {\n  id: <span class=\"hljs-built_in\">number</span>\n  name: <span class=\"hljs-built_in\">string</span>\n}\n\n<span class=\"hljs-keyword\">interface</span> Comment {\n  id: <span class=\"hljs-built_in\">number</span>\n  content: <span class=\"hljs-built_in\">string</span>\n  authorId: <span class=\"hljs-built_in\">number</span>\n}\n\n<span class=\"hljs-keyword\">type</span> Action = <span class=\"hljs-string\">'create'</span> | <span class=\"hljs-string\">'read'</span> | <span class=\"hljs-string\">'update'</span> | <span class=\"hljs-string\">'delete'</span>;\n<span class=\"hljs-keyword\">type</span> Subject = Article | Comment | User | <span class=\"hljs-string\">'Article'</span> | <span class=\"hljs-string\">'User'</span> | <span class=\"hljs-string\">'Comment'</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability&lt;[Action, Subject]&gt;();\n\nability.can(<span class=\"hljs-string\">'read'</span>, <span class=\"hljs-string\">'Article'</span>);\nability.can(<span class=\"hljs-string\">'write'</span>, <span class=\"hljs-string\">'Article'</span>); <span class=\"hljs-comment\">// error because non-existing action name</span>\nability.can(<span class=\"hljs-string\">'update'</span>, <span class=\"hljs-string\">'Coment'</span>) <span class=\"hljs-comment\">// error because of typo</span>\n</code></pre>\n<p>and classes:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@casl/ability'</span>;\n\n<span class=\"hljs-keyword\">class</span> Article {\n  id: <span class=\"hljs-built_in\">number</span>\n  title: <span class=\"hljs-built_in\">string</span>\n  content: <span class=\"hljs-built_in\">string</span>\n  authorId: <span class=\"hljs-built_in\">number</span>\n}\n\n<span class=\"hljs-keyword\">type</span> Action = <span class=\"hljs-string\">'create'</span> | <span class=\"hljs-string\">'read'</span> | <span class=\"hljs-string\">'update'</span> | <span class=\"hljs-string\">'delete'</span>;\n<span class=\"hljs-keyword\">type</span> Subject = <span class=\"hljs-keyword\">typeof</span> Article | Article;\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability&lt;[Action, Subject]&gt;();\n\nability.can(<span class=\"hljs-string\">'read'</span>, Article);\nability.can(<span class=\"hljs-string\">'update'</span>, <span class=\"hljs-keyword\">new</span> Article());\n</code></pre>\n<p>This may be a bit routine to specify all possible subject types, especially if you have more than 3 of them. To make it easier, CASL provide <code>InferSubjects</code> typescript helper which can infer subjects from <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions\" target=\"_blank\" rel=\"noopener nofollow\">tagged union</a>s (this helper checks <code>kind</code> and special <code>__caslSubjectType__</code> properties in order to determine the tag)</p>\n<blockquote>\n<p><code>__caslSubjectType__</code> is set by <code>subject</code> helper, to learn more check <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/subject-type-detection&quot;}\">Subject type detection</app-link></p>\n</blockquote>\n<p><img src=\"/casl/v4//images/casl-tagged-union-subject.png\" alt=\"CASL Typescript infer tagged union subject\" width=\"560\" height=\"382\"></p>\n<p>classes</p>\n<p><img src=\"/casl/v4//images/casl-class-subject.png\" alt=\"CASL Typescript infer class subject\" width=\"845\" height=\"404\"></p>\n<p>and even discriminated classes (you need to pass <code>true</code> to the 2nd generic parameter of <code>InferSubjects</code>).</p>\n<p><img src=\"/casl/v4//images/casl-discriminated-class-subject.png\" alt=\"CASL Typescript infer discriminated class subject\" width=\"663\" height=\"231\"></p>\n<p>The same parameter allows to infer <code>modelName</code> static property from classes (in case you want to use strings and not classes to check on subject type)</p>\n<p><img src=\"/casl/v4//images/casl-class-subject-with-name.png\" alt=\"CASL Typescript infer class modelName\" width=\"554\" height=\"234\"></p>\n<p>Moreover, the same behavior also works in complementary packages! So, you will get hints for React's <code>Can</code> component, Vue's <code>$can</code> function, Mongoose's plugins and others.</p>\n<blockquote>\n<p>To learn more, read about the complementary package for your framework</p>\n</blockquote>\n<p>But even this is not the end and you can go even further!</p>\n<h2 id=\"safer-permissions-inference\"><a name=\"safer-permissions-inference\" class=\"h-link\" href=\"#\"></a>Safer permissions inference</h2>\n<p>For the most cases the suggested approach above should be enough but if you prefer to ensure extreme type safety, you can define dependencies between actions and subjects. For example, user can only read information about users in your app and nothing more but can manage articles:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@casl/ability'</span>;\n\n<span class=\"hljs-keyword\">type</span> CRUD = <span class=\"hljs-string\">'create'</span> | <span class=\"hljs-string\">'read'</span> | <span class=\"hljs-string\">'update'</span> | <span class=\"hljs-string\">'delete'</span>;\n<span class=\"hljs-keyword\">type</span> Abilities = [<span class=\"hljs-string\">'read'</span>, <span class=\"hljs-string\">'User'</span>] | [CRUD, <span class=\"hljs-string\">'Article'</span>];\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability&lt;Abilities&gt;();\n\nability.can(<span class=\"hljs-string\">'read'</span>, <span class=\"hljs-string\">'User'</span>);\nability.can(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'User'</span>); <span class=\"hljs-comment\">// build time error! because it's not allowed to create users</span>\n</code></pre>\n<h2 id=\"useful-type-helpers\"><a name=\"useful-type-helpers\" class=\"h-link\" href=\"#\"></a>Useful type helpers</h2>\n<h3 id=\"raw-rule\"><a name=\"raw-rule\" class=\"h-link\" href=\"#\"></a>RawRule</h3>\n<p>Sometimes you may need to create <code>RawRule</code>s manually (or fetch them from db). In that case, you will need to type them explicitly. Use <code>RawRuleOf&lt;AppAbility&gt;</code> in case if you have type for <code>AppAbility</code> or <code>RawRuleFrom&lt;Abilities, Conditions&gt;</code> otherwise.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, RawRuleOf, RawRuleFrom, MongoQuery } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@casl/ability'</span>;\n\n<span class=\"hljs-keyword\">type</span> AppAbilities = [<span class=\"hljs-string\">'read'</span> | <span class=\"hljs-string\">'update'</span>, <span class=\"hljs-string\">'Article'</span>];\n<span class=\"hljs-keyword\">type</span> AppAbility = Ability&lt;AppAbilities&gt;;\n\n<span class=\"hljs-keyword\">const</span> rawRules: RawRuleOf&lt;AppAbility&gt;[] = [\n  { action: <span class=\"hljs-string\">'read'</span>, subject: <span class=\"hljs-string\">'Article'</span> }\n];\n\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRulesFromDb</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-title\">Promise</span>&lt;<span class=\"hljs-title\">RawRuleFrom</span>&lt;<span class=\"hljs-title\">AppAbilities</span>, <span class=\"hljs-title\">MongoQuery</span>&gt;[]&gt; </span>{\n  <span class=\"hljs-comment\">// implementation</span>\n}\n</code></pre>\n<h3 id=\"rule-of\"><a name=\"rule-of\" class=\"h-link\" href=\"#\"></a>RuleOf</h3>\n<p>Similar to <code>RawRule</code> helpers, there is a helper <code>RawRuleOf&lt;Ability&gt;</code> for <code>Rule&lt;Abilities, Conditions&gt;</code>.</p>\n<h3 id=\"ability-options-of\"><a name=\"ability-options-of\" class=\"h-link\" href=\"#\"></a>AbilityOptionsOf</h3>\n<p>Similar to <code>RawRule</code>, if you don't want to explicitly <code>AbilityOptions&lt;Abilities, Conditions&gt;</code>, you can use <code>AbilityOptionsOf&lt;Ability&gt;</code>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { AbilityOptionsOf, Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@casl/ability'</span>;\n\n<span class=\"hljs-keyword\">type</span> AppAbilities = [<span class=\"hljs-string\">'read'</span> | <span class=\"hljs-string\">'update'</span>, <span class=\"hljs-string\">'Article'</span>];\n<span class=\"hljs-keyword\">type</span> AppAbility = Ability&lt;AppAbilities&gt;;\n<span class=\"hljs-keyword\">const</span> options: AbilityOptionsOf&lt;AppAbility&gt; = {\n  detectSubjectType: <span class=\"hljs-function\">(<span class=\"hljs-params\">subject</span>) =&gt;</span> <span class=\"hljs-comment\">/* custom implementation */</span>\n};\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability&lt;AppAbilities&gt;([], options);\n</code></pre>\n<h3 id=\"any-ability-and-any-mongo-ability\"><a name=\"any-ability-and-any-mongo-ability\" class=\"h-link\" href=\"#\"></a>AnyAbility and AnyMongoAbility</h3>\n<p>These 2 types represents any <code>PureAbility</code> instance (including <code>AnyMongoAbility</code>) and any <code>Ability</code> instance. They are usually a good fit restrictions in generic types. For example, this is how <code>AnyAbility</code> is used in <code>AbilityBuilder</code>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AbilityBuilder&lt;T <span class=\"hljs-keyword\">extends</span> AnyAbility = AnyAbility&gt; {\n  <span class=\"hljs-comment\">// implementation details</span>\n}\n</code></pre>\n<h3 id=\"mongo-query\"><a name=\"mongo-query\" class=\"h-link\" href=\"#\"></a>MongoQuery</h3>\n<p>There are 2 types that represents built-in mongo operators:</p>\n<ul>\n<li><code>MongoQuery</code> is an actual mongo query.<br>\nIs used as a conditions restriction in <code>Ability</code> class. Actually <code>Ability</code> is a <code>PureAbility</code> with conditions to be restricted to <code>MongoQuery</code>.</li>\n<li><code>MongoQueryOperators</code> this is a type that contains supported MongoDB operators.</li>\n</ul>\n<h3 id=\"forced-subject\"><a name=\"forced-subject\" class=\"h-link\" href=\"#\"></a>ForcedSubject</h3>\n<p>Represents an object that has been casted to specific subject by using <code>subject</code> helper.</p>\n<blockquote>\n<p>See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/subject-type-detection&quot;}\" hash=\"subject-helper\">Subject type detection</app-link> for details</p>\n</blockquote>","headings":[{"id":"permissions-inference","title":"Permissions inference"},{"id":"infer-subject-types-from-interfaces-and-classes","title":"Infer subject types from interfaces and classes"},{"id":"safer-permissions-inference","title":"Safer permissions inference"},{"id":"useful-type-helpers","title":"Useful type helpers"},{"id":"raw-rule","title":"RawRule"},{"id":"rule-of","title":"RuleOf"},{"id":"ability-options-of","title":"AbilityOptionsOf"},{"id":"any-ability-and-any-mongo-ability","title":"AnyAbility and AnyMongoAbility"},{"id":"mongo-query","title":"MongoQuery"},{"id":"forced-subject","title":"ForcedSubject"}],"id":"advanced/typescript"}